{"version":3,"sources":["lib/types.ts","lib/utils.ts","components/Cell.tsx","views/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellStatus","Direction","GameStatus","randomIntFromInterval","min","max","Math","floor","random","range","start","stop","step","result","i","push","Cell","props","className","status","Food","Snake","cellKey","boardSize","boardSizeSquared","upperRow","lowerRow","leftCol","rightCol","Game","useState","board","counter","row","currentRow","col","createBoard","score","setScore","snakeCells","setSnakeCells","foodCell","setFoodCell","Right","direction","setDirection","Intro","gameStatus","setGameStatus","gameCountDown","setGameCountDown","record","setRecord","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Over","nextElement","headOfSnake","length","includes","setGameOver","Up","Left","Down","eatFood","newSnakeCells","shift","window","addEventListener","e","key","console","log","randomCell","playAgain","Play","setTimeout","map","rowIdx","cellNum","cellIdx","cellNumber","Normal","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.750c82a3.chunk.js","sourcesContent":["\nexport enum CellStatus {\n    Normal,\n    Snake,\n    Food,\n}\n\nexport enum Direction {\n    Up, \n    Right, \n    Down, \n    Left,\n}\n\nexport enum GameStatus {\n    Intro,\n    Over,\n    Play,\n}","import {useEffect, useRef} from 'react';\n\nexport function randomIntFromInterval(min: number, max: number) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function createBoard(boardSize: number) {\n    const board = [];\n    let counter = 1;\n    for (let row = 0; row<boardSize; row++) {\n        let currentRow = [];\n        for (let col = 0; col<boardSize; col++) {\n            currentRow.push(counter++);\n        }\n        board.push(currentRow);\n        \n    }\n    return board;\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback: any, delay: any) {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        // @ts-ignore\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n}\n\nexport function range(start:number, stop:number, step:number) {\n    if (typeof stop == 'undefined') {\n        // one param defined\n        stop = start;\n        start = 0;\n    }\n\n    if (typeof step == 'undefined') {\n        step = 1;\n    }\n\n    if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n        return [];\n    }\n\n    var result = [];\n    for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n};","import {CellStatus} from '../lib/types'\n\ninterface Props {\n    cellKey: number;\n    cellNumber: number;\n    row: number;\n    col: number;\n    status: CellStatus;\n}\n\nconst Cell = (props: Props) => {\n    return (\n        <div key={props.cellKey} className={`cell ${props.status==CellStatus.Food ? 'food-cell' : props.status==CellStatus.Snake ? 'snake-cell' : ''}`}></div>\n    )\n}\n\nexport default Cell;","import { useEffect, useState } from \"react\";\nimport {createBoard, randomIntFromInterval, useInterval, range} from '../lib/utils';\nimport Cell from '../components/Cell';\nimport {CellStatus, Direction, GameStatus} from '../lib/types';\n\nconst boardSize = 10;\nconst boardSizeSquared = boardSize*boardSize;\nconst upperRow = range(1, boardSize+1, 1);\nconst lowerRow = range(boardSizeSquared-boardSize+1, boardSizeSquared+1, 1);\nconst leftCol = range(1, boardSizeSquared-boardSize+2, boardSize);\nconst rightCol = range(boardSize, boardSizeSquared+1, boardSize);\n\nconst Game = () => {\n\n    const [board, setBoard] = useState(createBoard(boardSize));\n    const [score, setScore] = useState(0);\n    const [snakeCells, setSnakeCells] = useState([42]);\n    const [foodCell, setFoodCell] = useState(randomIntFromInterval(1, boardSizeSquared));\n    const [direction, setDirection] = useState(Direction.Right);\n    const [gameStatus, setGameStatus] = useState(GameStatus.Intro);\n    const [gameCountDown, setGameCountDown] = useState(3);\n    const [record, setRecord] = useState(1);\n\n    useInterval(() => {\n        if (gameStatus === GameStatus.Intro || gameStatus === GameStatus.Over || gameCountDown !==0) return;\n        let nextElement;\n        let headOfSnake = snakeCells[snakeCells.length-1]\n        if (direction === Direction.Right) {\n            if (rightCol.includes(headOfSnake)) setGameOver();\n            nextElement = headOfSnake + 1;\n            // if ([11,21,31,41,51,61,71,81,91,101,111].includes(nextElement)) setGameOver();\n        }\n        else if (direction === Direction.Up) {\n            if (upperRow.includes(headOfSnake)) setGameOver();\n            nextElement = headOfSnake - boardSize;\n            // if (([-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]).includes(nextElement)) setGameOver();\n        }\n        else if (direction === Direction.Left) {\n            if (leftCol.includes(headOfSnake)) setGameOver();\n            nextElement = headOfSnake - 1;\n            // if (([0,10,20,30,40,50,60,70,80,90,100]).includes(nextElement)) setGameOver();\n        }\n        else if (direction === Direction.Down) {\n            if (lowerRow.includes(headOfSnake)) setGameOver();\n            nextElement = headOfSnake + boardSize;\n            // if (([101,102,103,104,105,106,107,108,109,110]).includes(nextElement)) setGameOver();\n        }\n        else nextElement = 1;\n\n        if (snakeCells.includes(nextElement)) {\n            setGameOver();\n        }\n\n        if (foodCell === nextElement) {\n            eatFood();\n        } else {\n            let newSnakeCells = [...snakeCells, nextElement];\n            newSnakeCells.shift();\n            setSnakeCells(newSnakeCells);\n        }\n    }, 115)\n\n    useEffect(() => {\n        window.addEventListener('keydown', e => {\n            switch (e.key) {\n                case \"ArrowUp\":\n                    console.log('up')\n                    setDirection(Direction.Up);\n                    break;\n                case \"ArrowDown\":\n                    setDirection(Direction.Down);\n                    break;\n                case \"ArrowLeft\":\n                    setDirection(Direction.Left);\n                    break;\n                case \"ArrowRight\":\n                    setDirection(Direction.Right);\n                    break;\n            }\n        })\n    }, []);\n\n    const eatFood = () => {\n\n        setScore(score + 1);\n\n        let newSnakeCells = [...snakeCells, foodCell];\n        setSnakeCells(newSnakeCells);\n\n        // generate a random food cell\n        let randomCell = randomIntFromInterval(1, boardSizeSquared);\n        while (snakeCells.includes(randomCell)) {\n            randomCell = randomIntFromInterval(1, boardSizeSquared);\n        }\n        setFoodCell(randomCell);\n    }\n\n    const setGameOver = () => {\n        setSnakeCells([42]);\n        setFoodCell(randomIntFromInterval(1, boardSizeSquared));\n        setDirection(Direction.Right);\n        setGameStatus(GameStatus.Over);\n        setGameCountDown(3);\n        if (score > record) setRecord(score);\n    }\n\n    const playAgain = () => {\n        setSnakeCells([42]);\n        setFoodCell(randomIntFromInterval(1, boardSizeSquared));\n        setDirection(Direction.Right);\n        setScore(0);\n        setGameStatus(GameStatus.Play);\n        setGameCountDown(3);\n        if (gameCountDown === 3) {\n            setTimeout(() => {\n                setGameCountDown(2);\n                setTimeout(() => {\n                    setGameCountDown(1);\n                    setTimeout(() => {\n                        setGameCountDown(0);\n                        return;\n                    }, 1000);\n                }, 1000);\n            }, 1000);\n        }\n    }\n\n\n\n    return (\n        <>\n        {\n            gameStatus === GameStatus.Play ?\n                    <>\n                        <h1>{gameCountDown!==0 ? gameCountDown : `Score: ${score}`}</h1>\n                        {/* <h1>Score: {score}</h1> */}\n                        <div className=\"board\">\n                            {board.map((row, rowIdx) => (\n                                <div key={rowIdx} className=\"row\">\n                                    {row.map((cellNum, cellIdx) => (\n                                        <Cell\n                                            cellKey={cellIdx} \n                                            cellNumber={cellNum} \n                                            row={rowIdx} \n                                            col={cellIdx} \n                                            status={foodCell===cellNum ? CellStatus.Food : snakeCells.includes(cellNum) ? CellStatus.Snake : CellStatus.Normal}\n                                        />\n                                    ))}\n                                </div>\n                            ))}\n                        </div>\n                    </> :\n            gameStatus === GameStatus.Intro ?\n                    <>\n                        <h1>Welcome to Carl's Snake Game!</h1>\n                        <button className=\"button\" onClick={playAgain}>Start Game</button>\n                    </> \n            :\n                    <>\n                        <h1>Game Over!</h1>\n                        <h1>Score: {score} <br/> Record: {record}</h1>\n                        <button className=\"button\" onClick={playAgain}>Play Again</button>\n                    </>\n        }\n        </>\n    )\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './views/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}